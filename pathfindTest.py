import pygame
import math

pygame.init()

display_width = 852
display_height = 721
infinity = 9223372036854775807

def dijkstras(start, end, adjacency_matrix):
    verticies = []
    dist = []
    prev = []

    for i in range(len(adjacency_matrix)):
        dist.append(infinity)
        prev.append(None)
        verticies.append(i)
    dist[start] = 0

    while not len(verticies) == 0:
        minDist = infinity # vertex in Q with min distance
        u = 0
        for i in range(len(dist)):
            if dist[i] < minDist and i in verticies:
                minDist = dist[i]
                u = i

        if u == end: # if found target, work backwards to reconstruct path
            path = []
            u = end
            if not prev[u] == None or u == start:
                while not u == None:
                    path.insert(0, u)
                    u = prev[u]
            break

        verticies.remove(u)

        neighbors = [] # calculate all neighbors of current node
        for i in range(len(adjacency_matrix)):
                dst = adjacency_matrix[i][u]
                if not dst == 0:
                    neighbors.append(i)

        for n in neighbors:
            if n in verticies:
                alt = dist[u] + adjacency_matrix[n][u]
                if alt < dist[n]:
                    dist[n] = alt
                    prev[n] = u

    return path

gameDisplay = pygame.display.set_mode((display_width,display_height))
pygame.display.set_caption('Map Editor')

clock = pygame.time.Clock()

def main():
    img = pygame.image.load('Resources/loon.png')

    verticies = [(531.0526315789472, 196.8421052631578), (532.1052631578946, 231.05263157894728), (557.3684210526313, 241.57894736842096), (537.8947368421051, 314.736842105263), (542.6315789473682, 346.84210526315775), (524.2105263157893, 404.2105263157893), (557.894736842105, 405.78947368421035), (585.7894736842103, 446.31578947368405), (727.894736842105, 410.52631578947353), (821.0526315789471, 539.9999999999998), (675.2631578947365, 594.2105263157893), (636.3157894736839, 499.47368421052613)]
    edges = [[[(532.1052631578946, 196.8421052631578), (523.6842105263156, 207.3684210526315), (531.0526315789472, 229.99999999999991)], 0, 1], [[(532.1052631578946, 195.78947368421044), (542.6315789473682, 201.57894736842096), (558.4210526315787, 242.10526315789463)], 0, 2], [[(531.0526315789472, 231.57894736842096), (557.3684210526313, 241.57894736842096)], 1, 2], [[(530.5263157894734, 229.99999999999991), (536.3157894736839, 254.21052631578937), (524.2105263157893, 272.6315789473683), (526.8421052631577, 302.1052631578946), (538.4210526315787, 313.15789473684197)], 1, 3], [[(538.4210526315787, 313.15789473684197), (542.6315789473682, 346.31578947368405)], 3, 4], [[(542.6315789473682, 346.31578947368405), (524.7368421052629, 403.1578947368419)], 4, 5], [[(543.1578947368419, 345.7894736842104), (549.9999999999998, 371.0526315789472), (546.8421052631577, 388.4210526315788), (558.4210526315787, 404.736842105263)], 4, 6], [[(524.2105263157893, 403.6842105263156), (539.4736842105261, 408.4210526315788), (556.8421052631577, 405.78947368421035)], 5, 6], [[(558.4210526315787, 406.31578947368405), (575.2631578947367, 433.6842105263156), (586.3157894736839, 445.26315789473665)], 6, 7], [[(524.7368421052629, 403.6842105263156), (505.26315789473665, 429.99999999999983), (496.315789473684, 438.94736842105243), (489.47368421052613, 463.1578947368419), (452.10526315789457, 503.68421052631555), (444.73684210526295, 558.9473684210524), (453.6842105263156, 576.8421052631577), (473.6842105263156, 587.894736842105), (482.6315789473682, 604.7368421052629), (493.1578947368419, 610.5263157894734), (559.4736842105261, 604.7368421052629), (613.1578947368419, 593.6842105263155), (650.5263157894734, 595.2631578947365), (676.3157894736839, 594.2105263157893)], 5, 10], [[(584.7368421052629, 446.31578947368405), (592.1052631578945, 475.26315789473665), (613.6842105263155, 503.1578947368419), (625.7894736842103, 512.1052631578946), (630.5263157894734, 528.4210526315787), (643.1578947368419, 542.6315789473682), (645.2631578947365, 565.2631578947367), (652.6315789473681, 575.2631578947367), (662.6315789473681, 585.7894736842103), (673.6842105263155, 594.2105263157893)], 7, 10], [[(586.3157894736839, 445.26315789473665), (597.894736842105, 447.8947368421051), (609.473684210526, 468.42105263157873), (618.9473684210524, 478.94736842105243), (622.1052631578945, 495.7894736842103), (635.2631578947365, 499.9999999999998)], 7, 11], [[(635.2631578947365, 499.9999999999998), (658.9473684210524, 525.2631578947367), (664.7368421052629, 539.4736842105261), (678.9473684210524, 562.1052631578945), (684.2105263157891, 579.9999999999998), (674.7368421052629, 594.2105263157893)], 11, 10], [[(558.4210526315787, 239.9999999999999), (567.894736842105, 249.9999999999999), (588.9473684210524, 238.42105263157885), (604.2105263157893, 227.36842105263148), (619.9999999999998, 225.78947368421044), (627.894736842105, 236.8421052631578), (636.3157894736839, 259.4736842105262), (661.0526315789471, 286.84210526315775), (701.5789473684208, 319.4736842105262), (727.3684210526312, 409.47368421052613)], 2, 8], [[(727.894736842105, 410.52631578947353), (776.8421052631576, 420.52631578947353), (786.3157894736839, 433.6842105263156), (787.894736842105, 451.57894736842087), (786.8421052631576, 469.99999999999983), (797.3684210526312, 492.6315789473682), (796.8421052631576, 505.26315789473665), (808.9473684210523, 525.2631578947367), (821.5789473684207, 539.4736842105261)], 8, 9], [[(727.894736842105, 411.57894736842087), (731.0526315789471, 434.73684210526295), (744.7368421052629, 457.8947368421051), (737.3684210526312, 476.8421052631577), (718.4210526315786, 496.8421052631577), (729.473684210526, 522.1052631578946), (712.1052631578945, 567.3684210526313), (692.6315789473681, 589.473684210526), (674.7368421052629, 594.7368421052629)], 8, 10], [[(538.9473684210524, 314.736842105263), (557.894736842105, 334.736842105263), (561.5789473684208, 350.52631578947353), (576.8421052631577, 364.2105263157893), (588.9473684210524, 397.3684210526314), (643.6842105263155, 447.8947368421051), (652.1052631578945, 489.9999999999998), (672.6315789473681, 509.4736842105261), (675.7894736842103, 534.7368421052629), (694.2105263157891, 562.6315789473682), (695.2631578947365, 575.2631578947367), (675.7894736842103, 595.2631578947365)], 3, 10], [[(674.7368421052629, 594.2105263157893), (531.5789473684208, 197.89473684210517)], 10, 0]]
    adjacency_table = [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 421, 0], [37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [55, 28, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 59, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 63, 33, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0], [0, 0, 292, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 182, 0, 0, 0], [0, 0, 0, 344, 0, 439, 0, 179, 222, 0, 0, 112], [0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0]]

    path = []

    font = pygame.font.Font("freesansbold.ttf", 20)

    startVertex = -1
    endVertex = -1

    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_ESCAPE:
                    startVertex = -1
                    endVertex = -1
                    path = []
            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    mousePos = pygame.mouse.get_pos()
                    for i in range(len(verticies)):
                        distance = math.sqrt(pow(verticies[i][0] - mousePos[0], 2) + pow(verticies[i][1] - mousePos[1], 2))
                        if distance < 10:
                            if startVertex == -1:
                                startVertex = i
                            else:
                                endVertex = i
                                print(f"Start Vertex: {startVertex}, End Vertex: {endVertex}")

                                path = dijkstras(startVertex, endVertex, adjacency_table)
                                print(path)
        
        gameDisplay.fill((44,64,49))
        gameDisplay.blit(img, (0, 0))

        for i in edges:
            startPoint = i[1]
            endPoint = i[2]

            for j in range(len(i[0]) - 1):
                pygame.draw.line(gameDisplay, (0, 0, 0), i[0][j], i[0][j + 1], 3)

            for ii in range(len(path) - 1):
                start = path[ii]
                end = path[ii + 1]

                if startPoint == start and endPoint == end:
                    for j in range(len(i[0]) - 1):
                        pygame.draw.line(gameDisplay, (0, 255, 0), i[0][j], i[0][j + 1], 3)
            
        #for i in range(len(path) - 1):
        #    pygame.draw.line(gameDisplay, (0, 255, 0), verticies[path[i]], verticies[path[i + 1]], 3)

        for i in range(len(verticies)): # draw verticies
            if i == startVertex or i == endVertex:
                pygame.draw.circle(gameDisplay, (0, 255, 0), verticies[i], 10)
                text = font.render(str(i), True, (0, 0, 0))
            else:
                pygame.draw.circle(gameDisplay, (255, 0, 0), verticies[i], 10)
                text = font.render(str(i), True, (255, 255, 255))

            textRect = text.get_rect()
            textRect.center = verticies[i]

            gameDisplay.blit(text, textRect)

        pygame.display.update()
        clock.tick(60)

main()
pygame.quit()

quit()
