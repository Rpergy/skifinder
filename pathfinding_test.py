import numpy as np
import dijkstras

infinity = 100000000000

vertex_list = ["A", "B", "C", "D", "E", "F"]

verticies = [0, 1, 2, 3, 4, 5]

"""
adjacency_matrix = [[0, 0, 0, 0, 5, 0], 
                    [0, 0, 0, 0, 5, 0],
                    [0, 2, 0, 0, 0, 0], 
                    [0, 7, 2, 0, 0, 0], 
                    [5, 0, 2, 2, 0, 5],
                    [5, 0, 0, 0, 0, 0]]

distance_table = [[ 0, 10, 12, 14,  5,  5],
                  [ 9,  0,  2,  4,  4, 14],
                  [ 7,  2,  0,  2,  2, 12],
                  [ 7,  4,  2,  0,  2, 12],
                  [ 5,  4,  2,  2,  0, 10],
                  [ 5, 14, 12, 12, 10,  0]]
"""

adjacency_matrix = [[  0,   0,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0, 303,   0,  0,  0,   0,  0, 0,  0], 
                    [ 77,   0,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [  0,   0,  0, 94,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [  0,  69,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [  0,   0, 91,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [  0,   0,  0,  0, 275,  0, 0,  0, 212,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [  0,   0,  0,  0,   0, 52, 0,  0,   0,   0,   0, 53, 137,   0,  0,  0,   0,  0, 0, 97], 
                    [  0,  82,  0, 64,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [  0,   0,  0,  0,   0,  0, 0, 57,   0,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [164,   0,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [  0, 190,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [  0,   0,  0,  0,   0,  0, 0,  0,   0,   0, 173,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [  0,   0,  0,  0,   0,  0, 0,  0, 116,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [123,   0,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0,  0,   0,  0, 0,  0], 
                    [  0,   0,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0, 153,  0,  0,   0,  0, 0,  0], 
                    [  0,   0,  0,  0,   0,  0, 0,  0,   0, 174,   0,  0,   0,   0, 60,  0,   0,  0, 0,  0], 
                    [  0,   0,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0, 68,   0,  0, 0,  0], 
                    [  0,   0,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0,  0, 104,  0, 0,  0], 
                    [  0,   0,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0,  0,   0, 74, 0,  0], 
                    [  0,   0,  0,  0,   0,  0, 0,  0,   0,   0,   0,  0,   0,   0,  0, 92,   0,  0, 0,  0]]

distance_table = [[0, 77, 240, 146, 331, 428, 469, 159, 216, 164, 267, 440, 332, 123, 276, 336, 404, 508, 582, 428], [77, 0, 163, 69, 254, 351, 392, 82, 139, 241, 190, 363, 255, 200, 353, 413, 481, 585, 659, 505], [240, 163, 0, 232, 91, 366, 
418, 245, 302, 404, 353, 526, 418, 363, 516, 576, 644, 748, 822, 668], [146, 69, 232, 0, 323, 333, 374, 64, 121, 310, 259, 432, 237, 269, 422, 482, 550, 654, 728, 574], [331, 254, 91, 323, 0, 275, 327, 336, 393, 495, 444, 617, 509, 454, 607, 667, 735, 839, 913, 759], [428, 351, 366, 333, 275, 0, 52, 397, 454, 592, 541, 714, 570, 551, 704, 764, 832, 936, 1010, 856], [469, 392, 418, 374, 327, 52, 0, 438, 495, 633, 582, 755, 611, 592, 745, 805, 873, 977, 1051, 897], [159, 82, 245, 64, 336, 397, 438, 0, 57, 323, 272, 445, 173, 282, 435, 495, 563, 667, 741, 587], [216, 139, 302, 121, 393, 454, 495, 57, 0, 380, 329, 502, 116, 339, 492, 552, 620, 724, 798, 644], [164, 241, 
404, 310, 495, 592, 633, 323, 380, 0, 431, 604, 496, 287, 440, 174, 242, 346, 420, 266], [267, 190, 353, 259, 444, 541, 582, 272, 329, 431, 0, 173, 445, 390, 543, 603, 671, 775, 849, 695], [440, 363, 526, 432, 617, 714, 755, 
445, 502, 604, 173, 0, 618, 563, 716, 776, 844, 948, 1022, 868], [332, 255, 418, 237, 509, 570, 611, 173, 116, 496, 445, 618, 0, 455, 608, 668, 736, 840, 914, 760], [123, 200, 363, 269, 454, 551, 592, 282, 339, 287, 390, 563, 455, 0, 153, 213, 281, 385, 459, 305], [276, 353, 516, 422, 607, 704, 745, 435, 492, 234, 543, 716, 608, 153, 0, 60, 128, 232, 306, 152], [336, 413, 576, 482, 667, 764, 805, 495, 552, 174, 603, 776, 668, 213, 60, 0, 68, 172, 246, 92], [404, 481, 644, 550, 735, 832, 873, 563, 620, 242, 671, 844, 736, 281, 128, 68, 0, 104, 178, 160], [508, 585, 748, 654, 839, 936, 977, 667, 724, 346, 775, 948, 840, 385, 232, 172, 104, 0, 74, 264], [582, 659, 822, 
728, 913, 1010, 1051, 741, 798, 420, 849, 1022, 914, 459, 306, 246, 178, 74, 0, 338], [428, 505, 668, 574, 759, 856, 897, 587, 644, 266, 695, 868, 760, 305, 152, 92, 160, 264, 338, 0]]

startingNode = 11
targetNode = 15

path = [startingNode]

Q = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

currentNode = startingNode

distanceTravelled = 0

while not len(Q) == 0:
    try:
        Q.remove(currentNode)
    except:
        print("No path found")
        break

    neighbors = []
    for i in range(len(adjacency_matrix)): # calculate all neighbors of current node
        dst = adjacency_matrix[i][currentNode]
        if not dst == 0:
            neighbors.append(i)

    lowestCost = 10000000000000

    print(f"All neighbors: {neighbors}")

    for n in neighbors: # for each neighbor node, we need to calculate the cost relative to the parent node
        G = distance_table[n][startingNode] # distance from current node to starting node
        H = distance_table[n][targetNode] # distance from current node to target node
        F = H # cost
        print(f"Cost of node {n}: {F}")
        if F < lowestCost and n in Q:
            distanceTravelled += adjacency_matrix[n][currentNode]
            currentNode = n
            lowestCost = F
    
    if currentNode == targetNode:
        path.append(targetNode)
        break

    path.append(currentNode)

print(path)
print(distanceTravelled)
